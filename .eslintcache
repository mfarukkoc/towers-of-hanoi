[{"C:\\Users\\grygr\\Desktop\\towers-of-hanoi\\src\\index.js":"1","C:\\Users\\grygr\\Desktop\\towers-of-hanoi\\src\\App.js":"2","C:\\Users\\grygr\\Desktop\\towers-of-hanoi\\src\\reportWebVitals.js":"3","C:\\Users\\grygr\\Desktop\\towers-of-hanoi\\src\\components\\HanoiDisplay\\index.js":"4","C:\\Users\\grygr\\Desktop\\towers-of-hanoi\\src\\components\\HanoiDisplay\\Stick.js":"5","C:\\Users\\grygr\\Desktop\\towers-of-hanoi\\src\\components\\Disc\\index.js":"6"},{"size":517,"mtime":1607179106420,"results":"7","hashOfConfig":"8"},{"size":367,"mtime":1607179106417,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1607179106421,"results":"10","hashOfConfig":"8"},{"size":3726,"mtime":1607258815611,"results":"11","hashOfConfig":"8"},{"size":1615,"mtime":1607194330774,"results":"12","hashOfConfig":"8"},{"size":1181,"mtime":1607193124434,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"3qs202",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\grygr\\Desktop\\towers-of-hanoi\\src\\index.js",[],["28","29"],"C:\\Users\\grygr\\Desktop\\towers-of-hanoi\\src\\App.js",[],"C:\\Users\\grygr\\Desktop\\towers-of-hanoi\\src\\reportWebVitals.js",[],"C:\\Users\\grygr\\Desktop\\towers-of-hanoi\\src\\components\\HanoiDisplay\\index.js",["30"],"import React from 'react';\r\nimport { useState } from 'react';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport styled from 'styled-components';\r\nimport Disc from '../Disc';\r\nimport Stick from './Stick';\r\n\r\nconst Screen = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  background-color: lightblue;\r\n  width: 70%;\r\n  height: 70%;\r\n  padding: 8px 16px 0 16px;\r\n  margin: 0 auto;\r\n  border-radius: 10px;\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\r\n`;\r\nconst HanoiDisplay = () => {\r\n  const [sticks, setSticks] = useState({\r\n    stick0: [\r\n      { size: 6, color: 'black', draggableId: 'disk6', index: 0 },\r\n      { size: 7, color: 'red', draggableId: 'disk7', index: 1 },\r\n      { size: 8, color: 'blue', draggableId: 'disk8', index: 2 },\r\n      { size: 9, color: 'green', draggableId: 'disk9', index: 3 },\r\n    ],\r\n\r\n    stick1: [],\r\n    stick2: [],\r\n  });\r\n  const handleOnDragEnd = (result) => {\r\n    if (result.source !== null && result.destination !== null) {\r\n      const sourceId = result.source.droppableId;\r\n      const destinationId = result.destination.droppableId;\r\n      if (sourceId !== destinationId) {\r\n        let sourceClone = sticks[sourceId];\r\n        let destinationClone = sticks[destinationId];\r\n\r\n        if (\r\n          destinationClone.length\r\n            ? sourceClone[0].size < destinationClone[0].size\r\n            : true\r\n        ) {\r\n          destinationClone.forEach((disc) => {\r\n            disc.index += 1;\r\n          });\r\n          destinationClone.unshift({ ...sticks[sourceId][0], index: 0 });\r\n          sourceClone.splice(result.source.index, 1);\r\n          sourceClone.forEach((disc) => {\r\n            disc.index--;\r\n          });\r\n          setSticks({\r\n            ...sticks,\r\n            [sourceId]: sourceClone,\r\n            [destinationId]: destinationClone,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  var callStack = [];\r\n  var cloneSticks = { ...sticks };\r\n  const handleSolve = () => {\r\n    callStack = [];\r\n    move(4, 'stick0', 'stick2', 'stick1');\r\n    let i = 0;\r\n    callStack.forEach((snap) => {\r\n      i += 1;\r\n      setTimeout(() => {\r\n        console.log(snap); // display callStack for each snap debugging only\r\n        setSticks(snap);\r\n      }, 1000 * i);\r\n    });\r\n  };\r\n  const move = (n, source, target, aux) => {\r\n    if (n > 0) {\r\n      move(n - 1, source, aux, target);\r\n      let sourceClone = [...cloneSticks[source]];\r\n      let targetClone = [...cloneSticks[target]];\r\n\r\n      // move rings here\r\n      targetClone.forEach((disc) => {\r\n        disc.index += 1;\r\n      });\r\n      targetClone.unshift({ ...cloneSticks[source][0], index: 0 });\r\n      sourceClone.splice(0, 1);\r\n      sourceClone.forEach((disc) => {\r\n        disc.index--;\r\n      });\r\n\r\n      callStack.push({\r\n        ...cloneSticks,\r\n        [source]: sourceClone,\r\n        [target]: targetClone,\r\n      });\r\n\r\n      cloneSticks = {\r\n        ...cloneSticks,\r\n        [source]: sourceClone,\r\n        [target]: targetClone,\r\n      };\r\n      move(n - 1, aux, target, source);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n      <Screen>\r\n        <button\r\n          onClick={() => handleSolve()}\r\n          style={{ wordBreak: 'break-all' }}\r\n        >\r\n          Solve\r\n        </button>\r\n        {\r\n          // displays list of sticks for debugging\r\n          JSON.stringify(sticks, null, 4)\r\n        }\r\n        <Stick dropId=\"stick0\" discs={sticks['stick0']}></Stick>\r\n        <Stick dropId=\"stick1\" discs={sticks['stick1']}></Stick>\r\n        <Stick dropId=\"stick2\" discs={sticks['stick2']}></Stick>\r\n      </Screen>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default HanoiDisplay;\r\n","C:\\Users\\grygr\\Desktop\\towers-of-hanoi\\src\\components\\HanoiDisplay\\Stick.js",[],"C:\\Users\\grygr\\Desktop\\towers-of-hanoi\\src\\components\\Disc\\index.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":5,"column":8,"nodeType":"37","messageId":"38","endLine":5,"endColumn":12},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'Disc' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]